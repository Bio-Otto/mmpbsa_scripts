#!/usr/bin/env python3
"""
Test script to create valid molecules for MMGBSA testing
"""

from rdkit import Chem
from rdkit.Chem import AllChem

def create_test_molecules():
    """Create simple test molecules"""
    
    # Create a simple ligand (ethanol)
    ligand_smiles = "CCO"
    ligand = Chem.MolFromSmiles(ligand_smiles)
    if ligand is None:
        print("Failed to create ligand")
        return None, None
    
    ligand = Chem.AddHs(ligand)
    
    # Create a simple protein (alanine dipeptide)
    protein_smiles = "CC(=O)NC(C)C(=O)N"
    protein = Chem.MolFromSmiles(protein_smiles)
    if protein is None:
        print("Failed to create protein")
        return None, None
    
    protein = Chem.AddHs(protein)
    
    # Generate 3D coordinates
    try:
        AllChem.EmbedMolecule(ligand, randomSeed=42)
        AllChem.MMFFOptimizeMolecule(ligand)
        print(f"Ligand created successfully: {ligand.GetNumAtoms()} atoms")
    except Exception as e:
        print(f"Error with ligand: {e}")
        return None, None
    
    try:
        AllChem.EmbedMolecule(protein, randomSeed=42)
        AllChem.MMFFOptimizeMolecule(protein)
        print(f"Protein created successfully: {protein.GetNumAtoms()} atoms")
    except Exception as e:
        print(f"Error with protein: {e}")
        return None, None
    
    return protein, ligand

def create_complex_pdb(protein, ligand, filename="complex.pdb"):
    """Create a complex PDB file"""
    
    # Combine molecules
    complex_mol = Chem.CombineMols(protein, ligand)
    
    # Create PDB content with proper header
    pdb_content = Chem.MolToPDBBlock(complex_mol)
    header = "REMARK  Generated by MMGBSA package\n"
    header += "REMARK  Complex structure\n"
    header += "TITLE     PROTEIN-LIGAND COMPLEX\n"
    
    # Write the file
    with open(filename, 'w') as f:
        f.write(header)
        f.write(pdb_content)
    
    print(f"Created {filename} with {complex_mol.GetNumAtoms()} atoms")

if __name__ == "__main__":
    print("Creating test molecules...")
    protein, ligand = create_test_molecules()
    
    if protein is not None and ligand is not None:
        create_complex_pdb(protein, ligand)
        print("Test molecules created successfully!")
    else:
        print("Failed to create test molecules") 